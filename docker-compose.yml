networks:
  tradeguard-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

services:
  # Redis service for Risk Engine & BFF
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tradeguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Kafka service in KRaft mode
  kafka:
    image: "bitnami/kafka:latest"
    networks:
      - tradeguard-network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:19092,CONTROLLER://kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092" # Internal container-to-container traffic
      - "19092:19092" # Host-based traffic
      - "9093:9093" # KRaft controller
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kafka Topic Creator
  kafka-topics:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    profiles:
      - create-topics
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - tradeguard-network

  # PostgreSQL Database
  postgres:
    image: postgres:16.8
    environment:
      - POSTGRES_USER=tradeguard
      - POSTGRES_PASSWORD=tradeguard
      - POSTGRES_DB=tradeguard
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradeguard"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - tradeguard-network

  # Backend For Frontend service
  bff:
    build:
      context: ./tradeguard-server
      args:
        BUILD_PLATFORM: ${BUILD_PLATFORM:-linux/amd64}
      dockerfile: ${BFF_DOCKERFILE:-Dockerfile}
    ports:
      - "8080:8080"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=prod,no-news
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - DB_URL=jdbc:postgresql://postgres:5432/tradeguard
      - DB_DRIVER_CLASS=org.postgresql.Driver
      - DB_USERNAME=tradeguard
      - DB_PASSWORD=tradeguard
      - JPA_DB_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - KAFKA_TOPIC_JOB_UPDATES=job-updates
      - KAFKA_TOPIC_JOB_SUBMISSIONS=job-submissions
      - KAFKA_TOPIC_RISK_NOTIFICATIONS=risk-notifications
      - KAFKA_CONSUMER_GROUP=bff-group
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - DISCORD_BOT_TOKEN=${DISCORD_TOKEN}
      - DISCORD_REDIRECT_URI=tradeguard://auth/discord
      - NEWSDATA_API_KEY=${NEWSDATA_API_KEY}
      - CRYPTOPANIC_API_KEY=${CRYPTOPANIC_API_KEY}
      - SERVER_ADDRESS=0.0.0.0
      - SERVER_PORT=${SERVER_PORT:-8080}
      # Bybit API Keys for default account
      - RUN_MODE=${RUN_MODE:-live}
      - BYBIT_DEMO_KEY=${BYBIT_DEMO_KEY}
      - BYBIT_DEMO_SECRET=${BYBIT_DEMO_SECRET}
      - BYBIT_READONLY_KEY=${BYBIT_READONLY_KEY}
      - BYBIT_READONLY_SECRET=${BYBIT_READONLY_SECRET}
      - BYBIT_READWRITE_KEY=${BYBIT_READWRITE_KEY}
      - BYBIT_READWRITE_SECRET=${BYBIT_READWRITE_SECRET}
    networks:
      - tradeguard-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/api/actuator/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Trading Engine service
  tr:
    image: tradeguard-tr:latest
    profiles: ["tr"]
    ports:
      - "8081:8081"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy
      bff:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Tracing
      - RUST_LOG=${RUST_LOG:-trade_guard=info,serenity=warn,tracing=warn}

      # Discord Configuration
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - COMMAND_CHANNEL_ID=${COMMAND_CHANNEL_ID}

      # User Config
      - APPROVED_DISCORD_ID=${APPROVED_DISCORD_ID}
      - RUN_MODE=${RUN_MODE:-demo}

      # Account Enablement
      - ENABLE_BYBIT=${ENABLE_BYBIT:-true}
      - ENABLE_BINANCE=${ENABLE_BINANCE:-false}
      - ENABLE_JPN=${ENABLE_JPN:-false}
      - ENABLE_MDR=${ENABLE_MDR:-false}

      # Integration
      - BFF_BASE_URL=${BFF_BASE_URL:-http://bff:8080/api}

      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLIENT_ID=tradeguard-trading-engine
      - KAFKA_GROUP_ID=trading-engine-consumer
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - SKIP_KAFKA=${SKIP_KAFKA:-false}

      # Trading Parameters
      - DEFAULT_STEPS=${DEFAULT_STEPS:-10}
      - DEFAULT_DURATION_MINUTES=${DEFAULT_DURATION_MINUTES:-60}
      - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-50}
      - MIN_ORDER_SIZE_USD=${MIN_ORDER_SIZE_USD:-5}
      - MAX_SINGLE_ORDER_SIZE_USD=${MAX_SINGLE_ORDER_SIZE_USD:-500}
      - MAX_ALGORITHMIC_ORDER_SIZE_USD=${MAX_ALGORITHMIC_ORDER_SIZE_USD:-5000}

      # App Config
      - SYNC_TIME=${SYNC_TIME:-false}
    networks:
      - tradeguard-network
    restart: unless-stopped

  # Risk Engine service
  rs:
    build:
      context: ./tradeguard-health
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
      - REDIS_HOST=redis
      - KAFKA_LOG=${KAFKA_LOG:-INFO}
      - KAFKA_TOPIC_JOB_UPDATES=job-updates
      - KAFKA_TOPIC_RISK_NOTIFICATIONS=risk-notifications
      - KAFKA_CONSUMER_GROUP=rs-group
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - RS_LOG=${RS_LOG:-INFO}
      - RS_LOG_JOB_PROCESSOR=INFO
      - ENABLE_WEB_DASHBOARD=true
      - DASHBOARD_HOST=127.0.0.1
      - DASHBOARD_PORT=42069
      - DASHBOARD_REFRESH_RATE=1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - tradeguard-network
    restart: unless-stopped 